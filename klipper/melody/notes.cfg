
# notes frequencies could be found on various places like
#   https://pages.mtu.edu/~suits/notefreqs.html
#   https://en.wikipedia.org/wiki/Piano_key_frequencies
[gcode_macro _notes_map]
variable_notes: 
    {
        "C0": 16.35,
        "CS0": 17.32,
        "D0": 18.35,
        "DS0": 19.45,
        "E0": 20.60,
        "F0": 21.83,
        "FS0": 23.12,
        "G0": 24.50,
        "GS0": 25.96,
        "A0": 27.50,
        "AS0": 29.14,
        "B0": 30.87,
        "C1": 32.70,
        "CS1": 34.65,
        "D1": 36.71,
        "DS1": 38.89,
        "E1": 41.20,
        "F1": 43.65,
        "FS1": 46.25,
        "G1": 49.00,
        "GS1": 51.91,
        "A1": 55.00,
        "AS1": 58.27,
        "B1": 61.74,
        "C2": 65.41,
        "CS2": 69.30,
        "D2": 73.42,
        "DS2": 77.78,
        "E2": 82.41,
        "F2": 87.31,
        "FS2": 92.50,
        "G2": 98.00,
        "GS2": 103.83,
        "A2": 110.00,
        "AS2": 116.54,
        "B2": 123.47,
        "C3": 130.81,
        "CS3": 138.59,
        "D3": 146.83,
        "DS3": 155.56,
        "E3": 164.81,
        "F3": 174.61,
        "FS3": 185.00,
        "G3": 196.00,
        "GS3": 207.65,
        "A3": 220.00,
        "AS3": 233.08,
        "B3": 246.94,
        "C4": 261.63,
        "CS4": 277.18,
        "D4": 293.66,
        "DS4": 311.13,
        "E4": 329.63,
        "F4": 349.23,
        "FS4": 369.99,
        "G4": 392.00,
        "GS4": 415.30,
        "A4": 440.00,
        "AS4": 466.16,
        "B4": 493.88,
        "C5": 523.25,
        "CS5": 554.37,
        "D5": 587.33,
        "DS5": 622.25,
        "E5": 659.25,
        "F5": 698.46,
        "FS5": 739.99,
        "G5": 783.99,
        "GS5": 830.61,
        "A5": 880.00,
        "AS5": 932.33,
        "B5": 987.77,
        "C6": 1046.50,
        "CS6": 1108.73,
        "D6": 1174.66,
        "DS6": 1244.51,
        "E6": 1318.51,
        "F6": 1396.91,
        "FS6": 1479.98,
        "G6": 1567.98,
        "GS6": 1661.22,
        "A6": 1760.00,
        "AS6": 1864.66,
        "B6": 1975.53,
        "C7": 2093.00,
        "CS7": 2217.46,
        "D7": 2349.32,
        "DS7": 2489.02,
        "E7": 2637.02,
        "F7": 2793.83,
        "FS7": 2959.96,
        "G7": 3135.96,
        "GS7": 3322.44,
        "A7": 3520.00,
        "AS7": 3729.31,
        "B7": 3951.07,
        "C8": 4186.01,
        "CS8": 4434.92,
        "D8": 4698.63,
        "DS8": 4978.03,
        "E8": 5274.04,
        "F8": 5587.65,
        "FS8": 5919.91,
        "G8": 6271.93,
        "GS8": 6644.88,
        "A8": 7040.00,
        "AS8": 7458.62,
        "B8": 7902.13
    }

gcode:
  # dummy

[gcode_macro PLAY_NOTE]
gcode:
    {% set note = params.N %}
    {% set duration = params.D|default(1)|int %}
    {% set stop = params.S|default(1)|int %}
    {% set volume = params.VOLUME|default(75)|int %}
    {% set tempo = params.T|default(100)|int %}
    {% set octave = params.O|default(4)|int %}

    {% if (volume < 0 or volume > 100) %}
        { action_raise_error("Actual volume value (VOLUME) is out of range <0, 100>.") }
    {% endif %}

    {% set gain = ((2.71828182845904**(0.0612*volume)))*0.00217 %}
    {% set duration = tempo * 1 / duration %}
    {% set frequency = printer["gcode_macro _notes_map"].notes.get(note.upper() + octave|string, 0) %}

    M300 S{frequency} P{duration} G{gain} E{stop}

[gcode_macro PLAY_MELODY]
description: Tempo = 50 is minimal value for common chips (looks like quater/eight/hex are too small then)
gcode:
    {% set melody = params.MELODY|string %}
    {% set tempo = params.TEMPO|default(100)|int %}
    {% set defaultVolume = params.VOLUME|default(75)|int %}
    {% set melodies = printer["gcode_macro _melodies"].melodies %}

# calculate gain from volume
# TODO: this is far away from optimal, reaction on acoustics intensity is logarithmic, however beeper
# is controlled by PWM with uncertain transform function over beeper to acoustics intensity so this relation is fully theoretical,
# especially when this relation also depends on current frequency and personal "ear condition".
# So we need to convert linear percentage to exponential function or any other with experimentally found range:
#  1. Use "M300 S250 P500 G<value>" to find minimum, maximum and some other points
#  2. Find interpolating equation for these points in Excel/Matlab/Octave/...
#  3. Update defaultGain calculation below
#  4. Test update setup with PLAY_MELODY for several volumes.
#  5. If volume setup is not OK for you then repeat this calibration.
#
# Have you tried it with no luck?
#  1. Ignore this setup and force enter defaultGain value from open range (0,1) - 0 = turn off and 1 = saturation both causes no beeps, use some value between.
#  3. Remove G={<selector>} below and replace it by G={defaultGain} or G=<value> directly to disable also gain definition directly in melodies map.
#  2. Be patient and try it again to have this fancy feature :-)
#
# Note: setup below is for conditions:
#  1. active range around <0.001, 0.7> for C4 (261Hz) and beeper on 12864 display.

    {% for note in melodies[melody] %}
        PLAY_NOTE N={ note.note } D={ note.duration } G={ note.get("volume", defaultVolume) } S=0 T={ tempo }
    {% endfor %}
    M300 G0

# M* macro names uses different params parser so add macro invoke like "M300 S123 P456" instead of "M300 S=123 P=456"
# equation symbol breaks parser but only for M* macro names, so any other macro name like BEEP, START_PRINT, etc needs
# to have parameters defined with equation symbol
[gcode_macro M300]
description: Beep with S<value> frequency in <15,20000>[Hz] and P<value> duration in <0,4000>[ms]. Gain G<value> in <0,1)[-] while default is 0.6. Autostop after tone E<value> where 0 is off and 1 is on (default is 1).
gcode:
    {% set freq = params.S|default(1000)|int %}
    {% set duration = params.P|default(100)|int %}
    {% set gain = params.G|default(0.6)|float %}
    {% set autoStop = params.E|default(1)|int %}

    {% if (freq < 15 or freq > 20000) %}
        { action_raise_error("Actual frequency value (S) is out of range <15, 20000> Hz.") }
    {% endif %}
    # max duration range depends on maximum_mcu_duration in beeper pin config (max is 5s).
    {% if (duration < 0 or duration > 4000) %}
        { action_raise_error("Actual duration value (P) is out of range <0, 4000> ms.") }
    {% endif %}
    {% if (gain < 0 or gain >= 1) %}
        { action_raise_error("Actual gain value (G) is out of range <0, 1).") }
    {% endif %}

    SET_PIN PIN=beeper VALUE={ gain } CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
    G4 P{duration}
    {% if autoStop == 1 %}
        SET_PIN PIN=beeper VALUE=0
    {% endif %}
