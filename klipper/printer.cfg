[include mmu/base/*.cfg]
[include mmu/optional/mmu_menu.cfg]
### INFO
## pinout: https://teamgloomy.github.io/btt_octopus_1.1_f429_pins.html
## reference: https://www.klipper3d.org/Config_Reference.html#extruder
## checks: https://www.klipper3d.org/Config_checks.html

[include modules/**/*.cfg]

[include stealthburner_leds.cfg]
[include chamber_light.cfg]

[include melody/*.cfg]

#####################################################################
#   General Settings
#####################################################################
[mcu]
###Change to device found by "ls -l /dev/serial/by-id/" with just one this MCU connected to Pi
serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_22002B001050535556323420-if00
restart_method: command

[mcu SBCAN]
canbus_uuid: 83ee0efa782d

[printer]
kinematics: corexy
max_velocity: 350
max_accel: 15000
max_z_velocity: 12
max_z_accel: 350
square_corner_velocity: 5.0

[virtual_sdcard]
path: ~/printer_data/gcodes

[pause_resume]
recover_velocity: 50

[display_status]

[firmware_retraction]
# PETG
#retract_length: 0.268
# ASA
#retract_length: 0.8
# retract_speed: 65
# unretract_speed: 55
# SILK
retract_length: 0.25
retract_speed: 35
unretract_speed: 25
unretract_extra_length: 0

## fine arcs, resolution is experimental but started with that (lower than 0.2-0.3 can cause mcu shutdown) - 
## needs to be enabled to support orca slicer "spiral Z hop"
[gcode_arcs]
resolution: 0.1

## allow object exclusion if proper blocks are generated in gcode
[exclude_object]

[idle_timeout]
timeout: 3600

#####################################################################
#   RESONANCE
#####################################################################
[adxl345]
cs_pin: SBCAN: PB12
spi_software_sclk_pin: SBCAN: PB10
spi_software_mosi_pin: SBCAN: PB11
spi_software_miso_pin: SBCAN: PB2
axes_map: z,-y,x

[resonance_tester]
probe_points: 125, 125, 20
accel_chip: adxl345

[input_shaper]
## repeat calibration https://www.klipper3d.org/Measuring_Resonances.html
## whenever something mechanical is changed (box, extruder, extruder wiring, gantry, ...)
## update printer max acceleration accordingly
shaper_freq_x: 51.8
shaper_type_x: mzv
shaper_freq_y: 35.4
shaper_type_y: mzv

#####################################################################
#   X/Y Stepper Settings
#####################################################################
##  B Stepper - Left
##  Connected to MOTOR_1
[stepper_x]
step_pin: PG0
dir_pin: PG1
enable_pin: !PF15
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:200
endstop_pin: tmc2209_stepper_x:virtual_endstop
position_min: -10
position_endstop: -10
position_max: 240
homing_speed: 40
second_homing_speed: 10
homing_retract_dist: 0
# homing_positive_dir: false

[tmc2209 stepper_x]
uart_pin: PD11
interpolate: False
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0
diag_pin: ^PG9  # DIAG1
driver_SGTHRS: 90

##  A Stepper - Right
##  Connected to MOTOR_0
[stepper_y]
step_pin: PF13
dir_pin: PF12
enable_pin: !PF14
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:200
endstop_pin: tmc2209_stepper_y:virtual_endstop
position_min: 0
position_endstop: 260
position_max: 260
homing_speed: 40
second_homing_speed: 10
homing_retract_dist: 0
homing_positive_dir: true

[tmc2209 stepper_y]
uart_pin: PC4
interpolate: False
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0
diag_pin: ^PG6  # DIAG0
driver_SGTHRS: 90

#####################################################################
#   Z Stepper Settings
#####################################################################

##  Z0 Stepper - Front Left
##  Connected to MOTOR_6
[stepper_z]
step_pin: PE2
dir_pin: PE3
enable_pin: !PD4
rotation_distance: 4
microsteps: 32
endstop_pin: probe:z_virtual_endstop
position_max: 220
position_min: -5
homing_speed: 8.0
second_homing_speed: 3
homing_retract_dist: 3

##  Z-position of nozzle (in mm) to z-endstop trigger point relative to print surface (Z0)
##  (+) value = endstop above Z0, (-) value = endstop below
##  Increasing position_endstop brings nozzle closer to the bed
# position_endstop: 3.125

[tmc2209 stepper_z]
uart_pin: PE1
interpolate: False
run_current: 0.6
sense_resistor: 0.110
stealthchop_threshold: 0

##  Z1 Stepper - Rear Center
##  Connected to MOTOR_7
[stepper_z1]
step_pin: PE6
dir_pin: PA14
enable_pin: !PE0
# Rotation Distance for TR8x8 = 8, TR8x4 = 4, TR8x2 = 2
rotation_distance: 4
microsteps: 32

[tmc2209 stepper_z1]
uart_pin: PD3
interpolate: False
run_current: 0.6
sense_resistor: 0.110
stealthchop_threshold: 0

##  Z2 Stepper - Front Right
##  Connected to MOTOR_5
[stepper_z2]
step_pin: PC13
dir_pin: PF0
enable_pin: !PF1
# Rotation Distance for TR8x8 = 8, TR8x4 = 4, TR8x2 = 2
rotation_distance: 4
microsteps: 32

[tmc2209 stepper_z2]
uart_pin: PE4
interpolate: False
run_current: 0.6
sense_resistor: 0.110
stealthchop_threshold: 0

#####################################################################
#   Extruder
#####################################################################

[extruder]
step_pin: SBCAN: PD0
dir_pin: SBCAN: PD1
enable_pin: !SBCAN: PD2
##  Update value below when you perform extruder calibration
##  If you ask for 100mm of filament, but in reality it is 98mm:
##  rotation_distance = <previous_rotation_distance> * <actual_extrude_distance> / 100
##  22.6789511 is a good starting point
rotation_distance: 22.11419442
gear_ratio: 50:10
microsteps: 32
full_steps_per_rotation: 200    #200 for 1.8 degree, 400 for 0.9 degree
pressure_advance: 0.02
pressure_advance_smooth_time: 0.040

## HOTEND
nozzle_diameter: 0.400
filament_diameter: 1.75
heater_pin: SBCAN: PB13

## EV6 version
## Check what thermistor type you have. See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types.
## Use "Generic 3950" for NTC 100k 3950 thermistors
# sensor_type: Generic 3950
# sensor_pin: SBCAN: PA3

## PT100
sensor_type: MAX31865
sensor_pin: SBCAN: PA4
# spi_bus: spi1
spi_software_sclk_pin: SBCAN:PA5
spi_software_mosi_pin: SBCAN:PA7
spi_software_miso_pin: SBCAN:PA6
rtd_nominal_r: 100
rtd_reference_r: 430
rtd_num_of_wires: 2

min_temp: 10
max_temp: 270
max_power: 1.0
min_extrude_temp: 170

control = pid
pid_Kp=27.874
pid_Ki=2.239
pid_Kd=86.760

##  E0 on MOTOR3
[tmc2209 extruder]
uart_pin: SBCAN: PA15
interpolate: false
run_current: 0.7
sense_resistor: 0.110
stealthchop_threshold: 0

#####################################################################
#   Bed Heater
#####################################################################

[thermistor Trianglelab-NTC100K-B3950]
temperature1: 25
resistance1: 103180
temperature2: 150
resistance2: 1366.2
temperature3: 250
resistance3: 168.6

[heater_bed]
heater_pin: PA3
sensor_type: Trianglelab-NTC100K-B3950
sensor_pin: PF3
##  The formula is "SSR_Current / (Wattage_of_bed_heater / Mains_voltage) = max_power"
##  If max_power is greater than 1.0, use 1.0
## G3NB-210B-1 (10A)
max_power: 1.0
min_temp: 0
max_temp: 135

control = pid
pid_kp = 61.636
pid_ki = 3.604
pid_kd = 263.494

#####################################################################
#   Probe
#####################################################################

[probe]
pin: !SBCAN: PB5
x_offset: 0
y_offset: 0
##  Increasing z_offset (+) brings nozzle closer to the bed (TAP)
z_offset: -0.845
speed: 10.0
samples: 4
samples_result: median
sample_retract_dist: 3.0
samples_tolerance: 0.01
samples_tolerance_retries: 6

activate_gcode:
    {% set PROBE_TEMP = 150 %}
    {% set MAX_TEMP = PROBE_TEMP + 5 %}
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}

    {% if TARGET_TEMP > PROBE_TEMP %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
        M109 S{ PROBE_TEMP }
    {% else %}
        # Temperature target is already low enough, but nozzle may still be too hot.
        {% if ACTUAL_TEMP > MAX_TEMP %}
            { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
            TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
        {% endif %}
    {% endif %}

#####################################################################
#   Fan Control
#####################################################################

[fan]
pin: SBCAN: PA1
kick_start_time: 0.5
off_below: 0.10

[heater_fan hotend_fan]
pin: SBCAN: PA0
max_power: 1.0
kick_start_time: 0.1
heater: extruder
heater_temp: 50.0
fan_speed: 0.4
tachometer_pin: ^SBCAN:PB15

[controller_fan controller_fan1]
pin: PA8
fan_speed: 0.6
idle_timeout: 30
idle_speed: 0.2
kick_start_time: 0.5
heater: heater_bed, extruder
stepper: extruder, stepper_x, stepper_y, stepper_z, stepper_z1, stepper_z2

[controller_fan controller_fan2]
pin: PE5
fan_speed: 0.6
idle_timeout: 30
idle_speed: 0.2
kick_start_time: 0.5
heater: heater_bed, extruder
stepper: extruder, stepper_x, stepper_y, stepper_z, stepper_z1, stepper_z2

[controller_fan motor_A]
pin: PD13 # J53
max_power: 0.75
idle_timeout: 10
kick_start_time: 0.5
stepper: stepper_y

[controller_fan motor_B]
pin: PD14 # J54
max_power: 0.75
idle_timeout: 10
kick_start_time: 0.5
stepper: stepper_y

[fan_generic exhaust_fan]
##  Exhaust fan - FAN3
pin: PD12
max_power: 1.0
shutdown_speed: 0.0

#####################################################################
#   LED Control
#####################################################################

#[output_pin caselight]
# Chamber Lighting - HE2 Connector (Optional)
#pin: PB10
#pwm:true
#shutdown_value: 0
#value:1
#cycle_time: 0.01

#####################################################################
#   Homing and Gantry Adjustment Routines
#####################################################################

# [safe_z_home]
# home_xy_position: 147, 250
# speed: 200
# z_hop: 0

[z_tilt]
##  Use Z_TILT_ADJUST to level the bed
z_positions:
    -50, 18
    125, 298
    300, 18
points:
    30, 5
    125, 195
    220, 5

speed: 240
horizontal_move_z: 20
retries: 5
retry_tolerance: 0.005

[bed_mesh]
speed: 240
horizontal_move_z: 3
mesh_min: 40, 40
mesh_max: 210, 210
probe_count: 5, 5
fade_start: 0.6
fade_end: 10
algorithm: bicubic
# read from calculated mesh positions (see last start in klippy.log)
# TODO: move this to constant section, will be used by macros too
zero_reference_position: 125.0, 125.0

########################################
# EXP1 / EXP2 (display) pins
########################################

[board_pins]
aliases:
# EXP1 header
    EXP1_1=PE8, EXP1_2=PE7,
    EXP1_3=PE9, EXP1_4=PE10,
    EXP1_5=PE12, EXP1_6=PE13,    # Slot in the socket on this side
    EXP1_7=PE14, EXP1_8=PE15,
    EXP1_9=<GND>, EXP1_10=<5V>,

# EXP2 header
    EXP2_1=PA6, EXP2_2=PA5,
    EXP2_3=PB1, EXP2_4=PA4,
    EXP2_5=PB2, EXP2_6=PA7,      # Slot in the socket on this side
    EXP2_7=PC15, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=<5V>

#####################################################################
#   Display
#####################################################################

[display]
##  mini12864 LCD Display
lcd_type: uc1701
cs_pin: EXP1_3
a0_pin: EXP1_4
rst_pin: EXP1_5
encoder_pins: ^EXP2_5, ^EXP2_3
click_pin: ^!EXP1_2
contrast: 63
spi_software_miso_pin: EXP2_1
spi_software_mosi_pin: EXP2_6
spi_software_sclk_pin: EXP2_2

[neopixel btt_mini12864]
##  To control Neopixel RGB in mini12864 display
pin: EXP1_6
chain_count: 3
initial_RED: 0.1
initial_GREEN: 0.5
initial_BLUE: 0.0
color_order: RGB

[output_pin beeper]
pin: EXP1_1
pwm: true
value: 0
shutdown_value: 0
cycle_time: 0.0001
maximum_mcu_duration: 5 ; must be greather than maximal M300 duration

[gcode_macro PLAY_CLEAN]
gcode:
    M300 S330 P150
    M300 S392 P150
    M300 S523 P150
    M300 S659 P600

##  Set RGB values on boot up for each Neopixel.
##  Index 1 = display, Index 2 and 3 = Knob
[delayed_gcode setdisplayneopixel]
initial_duration: 1
gcode:
    SET_LED LED=btt_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0
    SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
    SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3

#####################################################################
#   CUSTOM TEMPERATURE SENSORS
#####################################################################
[temperature_sensor raspberry_pi]
sensor_type: temperature_host
min_temp: 10
max_temp: 100

[temperature_sensor mcu_temp]
sensor_type: temperature_mcu
min_temp: 10
max_temp: 100

[temperature_sensor stealthburner]
sensor_type: Generic 3950
sensor_pin: SBCAN: PA2

[thermistor NTC_10K_3950]
# laskakit.cz, watterproof NTC Termistor 10K 1% 3950
# type: NTC 10k±1% 3950
# beta: 3950K -/+ 1%
temperature1: 25
resistance1: 10000
beta: 3950

[temperature_sensor chamber]
sensor_type: NTC_10K_3950
sensor_pin: PF7

#####################################################################
#   FILAMENT SENSORS
#####################################################################
[filament_motion_sensor encoder]
switch_pin: ^PG13
detection_length: 2.88
extruder: extruder
pause_on_runout: false
runout_gcode:
    M117 encoder runout
insert_gcode:
    M117 encoder inserted

[filament_switch_sensor runout_sensor]
switch_pin: ^PG12
pause_on_runout: false
runout_gcode:
    #{action_respond_info("RUNOUT: Filament runout")}
    M117 switch runout
insert_gcode:
    M117 switch inserted

#####################################################################
#   Macros
#####################################################################

[gcode_macro GET_LOCATION]
gcode:
    M114

[gcode_macro HOME_AND_TILT]
description: XYZ homing and Z tilt adjustment Z homeing after that. During print start after first pre-home and timeout for manual nozzle cleaning.
gcode:
    BED_MESH_CLEAR
    {% if printer.toolhead.homed_axes == "xyz" %}
    M117 Already homed
    G28 Z
    {% else %}
    M117 Homing ...
    G28
    {% endif %}
    M117 Tilt correction...
    Z_TILT_ADJUST
    M117 
    G28 Z                   ; home again after tilt adjustment

# [gcode_macro CALIBRATE_Z]
# description: Calibrate Z endstop (clean nozzle before), run PROBE_CALIBRATE after
# gcode:
#     {% set is_first_run = params.FIRST_RUN|default(0)|int %}
#     {% if is_first_run == 0 %}
#     HOME_AND_TILT
#     {% endif %}

#     G90 ; absolute position
#     G1 X125 Y210 Z20 F5000
#     Z_ENDSTOP_CALIBRATE
#     G1 X125 Y210 Z20 F5000

# [gcode_macro CALIBRATE_Z_INIT]
# description: Similar to CALIBRATE_Z but not starting TILT, use this for first time init
# gcode:
#     CALIBRATE_Z FIRST_RUN=1

## TODO: generalize with CALIBRATE_Z and find way to save x/y locations and IS_CALIBRATED to some global variable like printer.my_variables
[gcode_macro CALIBRATE_PROBE]
description: Calibrate probe, CALIBRATE_Z macro needs to be invoked before and apply Z calibration setup to printer.cfg
gcode:
    {% set is_first_run = params.FIRST_RUN|default(0)|int %}
    {% if is_first_run == 0 %}
    HOME_AND_TILT
    {% endif %}
    G90 ; absolute position
    G1 X125 Y210 Z20 F5000
    PROBE_CALIBRATE
    G1 X125 Y210 Z20 F5000

[gcode_macro CALIBRATE_PROBE_INIT]
description: Similar to CALIBRATE_PROBE but not starting TILT, use this for first time init
gcode:
    CALIBRATE_PROBE FIRST_RUN=1

[gcode_macro M109]
rename_existing: M109.1
gcode:
  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=heating_nozzle VALUE=True
  M109.1 {rawparams}
  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=heating_nozzle VALUE=False

[gcode_macro M190]
rename_existing: M190.1
gcode:
  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=heating_bed VALUE=True
  M190.1 {rawparams}
  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=heating_bed VALUE=False

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:
  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=probing VALUE=True
  #_BED_MESH_CALIBRATE
  KAMP_ADAPTIVE_MESHING
  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=probing VALUE=False

# For printer with QGL
[gcode_macro Z_TILT_ADJUST]
rename_existing: _Z_TILT_ADJUST
gcode:
  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=qgling VALUE=True
  _Z_TILT_ADJUST
  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=qgling VALUE=False

## use this init macro in print start
[gcode_macro CALIBRATE_BED]
variable_qgling: False
gcode:
    HOME_AND_TILT
    M117 Mesh...
    BED_MESH_CALIBRATE
    G90
    G1 Z20

[gcode_macro LOAD_FILAMENT]
description: Heat-up hotend, wait for filament and extrude some string
gcode:
    # printer.toolhead.heater.temperature || GET_TEMPERATURE EXTRUDER=0

# init heating
    M104 S150
    MOVE_TO_SERVICE_POSITION

# wait for extrudable temperature (240c should be OK to extrude any kind of filament)
    M109 S230

    M300 ; beep

# TODO: wait for filament (check runout sensor) - this check is OK also when triggered by automated load
    M83 ; relative extruder
    G92 E0.0 ; reset extruder position

# extrusion length needs to be long enough to clean nozzle from last color/type
;G1 E200 F350
    G1 E50 F350
    G1 E50 F350
    G1 E50 F350

    G1 E-25.0 F1200                ; retract filament
    G4
    G92 E0.0
# use M82 here if rest of config expect absolute mode

# if this macro will be called from pause/filament-change/.. this and maybe other stuff needs to be revised
    M104 S0 ; turn of nozzle

[gcode_macro UNLOAD_FILAMENT]
description: Heat-up hotend, wait for filament temperature and retract
gcode:
    M300

[gcode_macro MOVE_TO_SERVICE_POSITION]
gcode:
    {% set th = printer.toolhead %}
    {% set x_mid = 2*(th.axis_maximum.x - th.axis_minimum.x)/3 %}
    {% set y_front = 0 %}
    {% set z_clean = 80 %}

    {% if printer.toolhead.homed_axes == "xyz" %}
    M117 Already homed
    {% else %}
    M117 Homing ...
    G28
    {% endif %}

    G90 ; absolute positioning
    G1 X{x_mid} Y{y_front} Z{z_clean} F10000
    G4

[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - PLEASE CUSTOMISE THE SCRIPT
# **** ORCASLICER ****
# M104 S0
# M140 S0
# PRINT_START BED_TEMP=[first_layer_bed_temperature] EXTRUDER_TEMP=[first_layer_temperature] CHAMBER_TEMP=[chamber_temperature]
# M221 S{if layer_height<0.075}100{else}95{endif}
gcode:
# read params from slicer
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
    {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(40)|float %}
    {% set FILAMENT_TYPE = params.FILAMENT|string %}

    CLEAR_PAUSE
    
    # disable MMU by default until it will be fixed
    # { action_respond_info("MMU Disabled") }
    # MMU ENABLE=0

    SET_FAN_SPEED FAN=exhaust_fan SPEED=0

    # todo: add logic to get nozzle type, and adjust temp accordingly? it will prevent necessary updates of filament profile in slicer when swithing between cooper/brass and hardened iron

# temperature init
    M140 S{BED_TEMP}
    M104 S150 ; Set non dripping hotend temperature

# home printer if not homed to allow movements and park to allow nozzle cleaning
#  (another homing will be performed during bed calibration)
    MOVE_TO_SERVICE_POSITION

# wait for non dripping hotend temperature
    M109 S150
    M117 Clean nozzle!
    M300 ; beep
    M300 ; beep
    M300 ; beep
    G4 P10000

# wait for bed temperature
    M117 Heating bed...
    M190 S{BED_TEMP}
    G90 ; absolute positioning
    M83 ; relative extruder

    CALIBRATE_BED

# prepare for cleaning procedure and heat up extruder
    G1 X8 Y0 Z5 F5000

    M117 Heating extruder...
    M109 S{EXTRUDER_TEMP}

    MMU_ENCODER ENABLE=0

# clean nozzle
    G92 E0  ; reset retracted distance

; phase-1: extrude the more then retracted on last print_end
    G1 X100 Z0.3 F3000
    G1 X10 E15 F600
    G1 X10 Y0.5 F600
    G1 X160 E30 F600
; phase-2: cleaning
    G1 X180 F5000

    G92 E0
;   G1 E-0.02 F1200  ; limit stringing
;   G92 E0

    MMU_ENCODER ENABLE=1

# turn on exhaust fan for PLA
# add other filaments wich needs a lot of cooling
    {% if FILAMENT_TYPE == "PLA" %}
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0.75
    {% endif %}
    
     M117 Printing...

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
# ;BEFORE_LAYER_CHANGE
# G92 E0.0
# ;[layer_z]
gcode:
# safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 20, th.axis_maximum.z]|min %}

    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M117 Cooling...
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F9000  ; park nozzle at rear

    M400                           ; wait for buffer to clear
    
    M106 ; full speed cooling on nozzle
    G92 E0                         ; zero the extruder
    G4 P500
    G1 E-5.0 F120                 ; retract filament

    M140 S0
    M109 S150
    
    TURN_OFF_HEATERS

    M107                                     ; turn off fan
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0.0  ; turn off exhaust

    M84 ; turn off steppers
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    M117

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    M117 Canceling print...
    CLEAR_PAUSE
    PRINT_END
    CANCEL_PRINT_BASE

#SET_FILAMENT_PROP RETRACT_LENGTH=[retraction_length] RETRACT_SPEED=[retraction_speed] UNRETRACT_SPEED=[deretraction_speed] UNRETRACT_EXTRA=[retract_restart_extra]
[gcode_macro SET_FILAMENT_PROP]
description: Update printer properties based on filament change
gcode:
    {% set retract_length = params.RETRACT_LENGTH|default(-1)|float %}
    {% set retract_speed = params.RETRACT_SPEED|default(-1)|int %}
    {% set unretract_speed = params.UNRETRACT_SPEED|default(-1)|int %}
    {% set unretract_extra = params.UNRETRACT_EXTRA|default(-1)|float %}

    {% if retract_length >= 0 %}
    SET_RETRACTION RETRACT_LENGTH={retract_length}
    {% endif %}
    {% if retract_speed >= 0 %}
    SET_RETRACTION RETRACT_SPEED={retract_speed}
    {% endif %}
    {% if unretract_speed >= 0 %}
    SET_RETRACTION UNRETRACT_SPEED={unretract_speed}
    {% endif %}
    {% if unretract_extra >= 0 %}
    SET_RETRACTION UNRETRACT_EXTRA_LENGTH={unretract_extra}
    {% endif %}

[gcode_macro _KNOMI_STATUS]
variable_homing: False
variable_probing: False
variable_qgling: False
variable_heating_nozzle: False
variable_heating_bed: False
gcode:

[gcode_macro _home_x]
gcode:
    {% set current_x = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set current_homing = 0.7 %}

    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={current_homing}

    G28 X
    G91
    {% if printer.configfile.settings['stepper_x'].homing_positive_dir == True %}
        G1 X-10 F1200
    {% else %}
        G1 X10 F1200
    {% endif %}
    
    G4 P200
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={current_x}

[gcode_macro _home_y]
gcode:
    {% set current_y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set current_homing = 0.7 %}

    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={current_homing}

    G28 Y
    G91
    {% if printer.configfile.settings['stepper_y'].homing_positive_dir == True %}
        G1 Y-10 F1200
    {% else %}
        G1 Y10 F1200
    {% endif %}
    
    G4 P200
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={current_y}

[gcode_macro _home_z]
gcode:
#   home_xy_position: 147, 250
    G90
    G1 X125 Y125 F3600
    G28 Z
    G1 Z10
    
[homing_override]
axes: xyz
gcode:
  {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}

  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=homing VALUE=True
  {% if home_all or 'X' in params %}
    _HOME_X
  {% endif %}
  
  {% if home_all or 'Y' in params %}
    _HOME_Y
  {% endif %}
  
  {% if home_all or 'Z' in params %}
    _HOME_Z
  {% endif %}
  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=homing VALUE=False

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    {% set th = printer.toolhead %}
    {% set x_mid = 2*(th.axis_maximum.x - th.axis_minimum.x)/3 %}
    {% set y_front = 0 %}
    {% set z = params.Z|default(10)|int %}
    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
        SET_FILAMENT_SENSOR SENSOR=runout_sensor ENABLE=0
        SAVE_GCODE_STATE NAME=PAUSE  ; save current printer state

        BASE_PAUSE

        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
            G91
            G1 Z{z}
        {% else %}
            { action_respond_info("Pause zhop skipped, maximum height exceeds") }
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90
        G1 X{x_mid} Y{y_front} F10000
        SAVE_GCODE_STATE NAME=PAUSE_PARK
        #M104 S0. ????
        SET_IDLE_TIMEOUT TIMEOUT=14400  ; 4hours
    {% endif %}

# todo: find way how to handle slicer option "individual objects" and "one at a time" (individual objects must be printed from back to fron, otherwise it can crash)
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    {% set e = params.E|default(2.5)|int %}
    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=runout_sensor ENABLE=1
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
        {% if etemp > 0 %}
            M109 S{etemp|int}
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE_PARK MOVE=1
        G91
        M83
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900
        {% else %}
            G1 Z{zhop * -1} F900
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1
        BASE_RESUME
    {% endif %}
